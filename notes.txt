Backlog

Add poliicy to have a preapporved list of vendors - PENDING
propose policy to have a preapproved list of recurring items to purchase

(non-essential)add back navigation and from navigation - PENDING - i.e as well as breadcrumbs to help the user identifyy
where they are

-put in a place a feature that can restrict a child from progressing to the
next grade(is there still such a thing as repeating a class?)-PENDING
-should not allow a child to be unregistered if they still have a balance,rather they should be deactivated
and the invoicer will skip all the students who are inactive

make the system refresh the token call upon login and keep refreshing every hour as long as the user is still active- PENDING


we need retry workflows so that we make sure that the data is persisted to quickbooks


12/09/2022 System Notes
1.Academic Calendar app
> What happens when someone passes in a date to AcademicCalendar.get_term but we do not have a calendar for that year?
>AcademicCalendar.date_range should include the start and end dates in thr range list
>Check whether the date passed in as an argument is a valid date on all the methods on the modifiable
>

2.Account
>be sure to direct transactions to their respective accounts
>Add try except blocks to qb_api calls in the create_account method
>Ensure the synced flag is raised after you successfully save a qb_item
>rename create_account to create_qb_account
>>decouple the sims and qb sims by removing the create_qb_account from the account's's save method, and instead call that method from the view togetheer with a try...except clause

3. billItem
>Future feature, be able to make multiple bill items in one bill
>Change status field in bill item to a boolean 'paid' attribute
>add try_except blocks on create_bill
>rename  create_bill to create_qb_bill
>decouple the sims and qb sims by removing the create_qb_bill from the bill item's save method, and instead call that method from the view togetheer with a try...except clause
>add form validation
>Add bill number attribute to billItem to come from the saved create_qb_bill
>remove pay_bill from views, and add it as a method in bill_payment, the method should receive a bill object

4. bill_payment
>rename create_qb_bill_payment_obj to create_qb_bill_payment
>add a method,'pay_bill' to the class
>>decouple the sims and qb sims by removing the create_qb_bill_payment from the bill payment item's save method, and instead call that method from the view togetheer with a try...except clause


9.invoice
>Change the source of an invoice number so that the invoice number comes from a saved invoice
>>>decouple the sims and qb sims by removing the create_qb_invoice from the invoice's save method, and instead call that method from the view togetheer with a try...except clause

9.student
>validate form

should not allow the student to subscribe to two of the same items
policy: subscription to lunch and transport should be done at the earliest, preferably beefore making any payment
any student taking lunch should make it known at the beginning of the term

deployment checklist:
    > Verify the academic calendar has the correct start and end dates of each term

 while doing form verification,ensure that the dates make sense, i,e cant put a date earlier/later



next time when developing, use selenium to simulate user activity on the browser, like filling forms and clicking buttons
to eliminate the need to have to manually simulate user activity

subscribing to items, the charges must be applied to the invoices for the current terms

should change the status of the invoice to unpaid when subscribing to items just in case the invoice was cleared
ypu should have only one invoice for a given term/year pair

it is critical that you validate the user's input! in all the applications



-make the sidebar stick to the top of the page and the rest of the page to scroll up and down
-add chart to show the distribution of unpaid fees per grade
-make sure to validate the bill form so that the price_per_quantity* amount = total
-and make sure to auto-calculate the total for the user


-add select 2.js to the record all recording forms

-hover dropdown- make sidebar button dropdown on hover - NON ESSENTIAL

-add export to pdf and csv buttons to tables

-dont forget the task that run at tevery beginning of the year, graduating students to the next grade
-and the scheduler that runs every beginning of the term to invoice the students


-use django-mailer to send emails
-make datatables load the most recent records first in all tables -important
-make total field in edit and record bill forms autocalculate
 - the student's active field will only prevent him from being invoices, but the systems should not allow his
