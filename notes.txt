
#pending: registration should only be done after the beginning of the term (disable register student )

#pending: add poliicy to have a preapporved list of vendors 

#pending (non-essential)add back navigation and fron navogation 
put in a plcae a feature that can restrict a child from progressing to the next grade(is there still such a thing as repeating a class?)
many fees structure querie rely on the student's current grade

remember to add try..block statements to the API calls

the the customers are being invoice 2 times

if the current term's fees is fully paid, and an excess amount is payed, then a new invoice should be created for the next term and 
the excess amount be added there.
therefore, whenever the new term script is run(that invoices students every new term) it should check whether an invoice for that term and year
already exists

make the system refresh the token call upon login



Login must be done with the school's official email address

make sure to put a timer to update the token whenever its about to expire 


more fatures down the road (further recommendations)
>Bank Intergration to automatically make payments
>Mass SMS and Email (Mass Communications)


we need retry workflows so that we can decouple SIMS from the bookkeeping aspect of the system

i should have a limit to how much is allowed as payments 


12/09/2022 System Notes
1.Academic Calendar app
> What happens when someone passes in a date to AcademicCalendar.get_term but we do not have a calendar for that year?
>AcademicCalendar.date_range should include the start and end dates in thr range list
>Check whether the date passed in as an argument is a valid date on all the methods on the modifiable
>

2.Account
>be sure to direct transactions to their respective accounts
>Add try except blocks to qb_api calls in the create_account method
>Ensure the synced flag is raised after you successfully save a qb_item
>rename create_account to create_qb_account
>>decouple the sims and qb sims by removing the create_qb_account from the account's's save method, and instead call that method from the view togetheer with a try...except clause

3. billItem
>Future feature, be able to make multiple bill items in one bill
>Change status field in bill item to a boolean 'paid' attribute
>add try_except blocks on create_bill
>rename  create_bill to create_qb_bill
>decouple the sims and qb sims by removing the create_qb_bill from the bill item's save method, and instead call that method from the view togetheer with a try...except clause
>add form validation
>Add bill number attribute to billItem to come from the saved create_qb_bill
>remove pay_bill from views, and add it as a method in bill_payment, the method should receive a bill object

4. bill_payment
>rename create_qb_bill_payment_obj to create_qb_bill_payment
>add a method,'pay_bill' to the class
>>decouple the sims and qb sims by removing the create_qb_bill_payment from the bill payment item's save method, and instead call that method from the view togetheer with a try...except clause

5.core
6.dashboard
>remember to add analytics:
    >dashbord summaries:
    >total amount of unpaid bills
    >total amount of unpaid fees arrears
    >total amount of paid fees
    >total number of students taking transport
    >total number of students taking lunch
    >total number of students in each grade (Table)

7. FeesStructure
8.grade
9.invoice
>Change the source of an invoice number so that the invoice number comes from a saved invoice
>>>decouple the sims and qb sims by removing the create_qb_invoice from the invoice's save method, and instead call that method from the view togetheer with a try...except clause

9.student
>validate form



should not allow the student to subscribe to two of the same items
policy: subscription to lunch and transport should be done at the earliest, preferably beefore making any payment

deployment checklist:
    > Verify the academic calendar has the correct start and end dates of each term

 while doing form verification,ensure that the dates make sense, i,e cant put a date earlier/later



next time when developing, use selenium to simulate user activity on the browser, like filling forms and clicking buttons
to eliminate the need to have to manually simulate user activity

subscribing to items, the charges must be applied to the invoices for the current terms
should change the status of the invoice to unpaid when subscribing to items just in case the invoice was cleared
ypu should have only one invoice for a given term/year

it is critical that you validate the user's input! in all the applications

get datables to display entries in a descending wise order

20/09/2022
>add success notification message on every successfully created object
    >prevent button from submitting the same data twice or submitting the data twice
    >add confirmaiton modal

>We should